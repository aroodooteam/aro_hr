# -*- coding: utf-8 -*-
##############################################################################
#
#    OpenERP, Open Source Management Solution
#    Copyright (C) 2004-2010 Tiny SPRL (<http://tiny.be>).
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU Affero General Public License as
#    published by the Free Software Foundation, either version 3 of the
#    License, or (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU Affero General Public License for more details.
#
#    You should have received a copy of the GNU Affero General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
##############################################################################
# Generated by the OpenERP plugin for Dia !
# from osv import fields
from openerp.osv import fields, osv
import datetime



"""
class hr_applicant(osv.osv):
    _inherit = 'hr.applicant'
    def _get_salary(self, cr, uid, ids, name, arg, context={}):
        result = {}
        net=0
        param_obj=self.pool.get('hr.payroll_ma.parametres')
        param_ids=param_obj.search(cr,uid,[])
        param_ids=param_obj.browse(cr,uid,param_ids)
        for param in param_ids:
            if not param.salary_on_index:
                return False
            else:
                index_value=param.index
        for payroll in self.browse(cr, uid, ids, context):
            for index in payroll.job_id.categ_id.index_ids:
                result[payroll.id] = index.index*173.33*index_value/5
                break
        return result

    _columns = {
        'qualification_ids':fields.one2many('hr.applicant.qualification','applicant_id','Qualifications'),
        'formation_ids':fields.one2many('hr.applicant.formation','applicant_id','Formation'),#add by Hari
        'aptitude_ids':fields.one2many('hr.applicant.aptitude','applicant_id','Aptitudes'),
        'job_qualification_ids':fields.related('job_id','qualification_ids',string='Qualifications Requise',type='one2many',relation='hr.job.qualification'),
        'job_aptitude_ids':fields.related('job_id','aptitude_ids',string='Aptitudes Requise',type='one2many',relation='hr.job.aptitude' ),
        'job_qualification_ids':fields.related('job_id','qualification_ids',string='Qualifications Requise',type='one2many',relation='hr.job.qualification'),
        'job_formation_ids':fields.related('job_id','formation_ids',string='Formations necessaire',type='one2many',relation='hr.job.formation'),

        'salary_index':fields.function(_get_salary,method=True, type='float',digits=(16, 2), string='Salaire Indicatif'),

    }
"""


class hr_employee_task(osv.osv):
    _name = 'hr.job.task'

    _columns = {
        'name': fields.char('Description'),
        'job_id':fields.many2one('hr.job', 'Poste'),
        'categ_id':fields.many2one('hr.task.categ', u'Cat√©gorie')
    }
hr_employee_task()
