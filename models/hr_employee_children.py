# -*- coding: utf-8 -*-
##############################################################################
#
#    OpenERP, Open Source Management Solution
#    Copyright (C) 2004-2010 Tiny SPRL (<http://tiny.be>).
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU Affero General Public License as
#    published by the Free Software Foundation, either version 3 of the
#    License, or (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU Affero General Public License for more details.
#
#    You should have received a copy of the GNU Affero General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
##############################################################################
# Generated by the OpenERP plugin for Dia !

# import time
from mx import DateTime
# import datetime
#from openerp.tools.translate import _
#from openerp.osv import fields, osv
from openerp import api, exceptions, fields, models, _

def compute_age_from_dates(date_birth):
    now = DateTime.now()
    if (date_birth):
        dob = DateTime.strptime(date_birth, '%Y-%m-%d')
        delta = DateTime.Age(now, dob)
        deceased = ''
        years_months_days = str(delta.years) + "a " + str(delta.months)
        years_months_days += "m " + str(delta.days) + "j" + deceased
    else:
        years_months_days = "0"
    return years_months_days


class HrEmployeeChildren(models.Model):
    """(NULL)"""
    _name = 'hr.employee.children'

    # def _get_age(self, cr, uid, ids, name=None, arg=None, context=None):
    #     def compute_age_from_dates(date_birth):
    #         now = DateTime.now()
    #         if (date_birth):
    #             dob = DateTime.strptime(date_birth, '%Y-%m-%d')
    #             delta = DateTime.Age(now, dob)
    #             deceased = ''
    #             years_months_days = str(delta.years) + "a " + str(delta.months)
    #             years_months_days += "m " + str(delta.days) + "j" + deceased
    #         else:
    #             years_months_days = "0"
    #         return years_months_days

    #     result = {}
    #     for patient_data in self.browse(cr, uid, ids, context=context):
    #         message = _("Age '%s'") \
    #                 % (compute_age_from_dates(patient_data.date_birth),)
    #         self.log(cr, uid, patient_data.id, message)
    #         dt_brt = patient_data.date_birth
    #         result[patient_data.id] = compute_age_from_dates(dt_brt)
    #     return result

    @api.multi
    def _get_age(self):
        for child in self:
            child.age = compute_age_from_dates(child.date_birth)

    name = fields.Char(string='Nom',size=64)
    prenom = fields.Char(string='Prenom',size=64)
    date_birth = fields.Date(string='Date de naissance')
    age = fields.Char(compute='_get_age', string='Age')
    employee_id = fields.Many2one(string='Parent',comodel_name='hr.employee',)
    sex = fields.Selection(string='Sexe',selection=[('m', 'M'), ('f', 'F')])
