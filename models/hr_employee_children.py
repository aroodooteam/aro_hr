# -*- coding: utf-8 -*-
##############################################################################
#
#    OpenERP, Open Source Management Solution
#    Copyright (C) 2004-2010 Tiny SPRL (<http://tiny.be>).
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU Affero General Public License as
#    published by the Free Software Foundation, either version 3 of the
#    License, or (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU Affero General Public License for more details.
#
#    You should have received a copy of the GNU Affero General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
##############################################################################
# Generated by the OpenERP plugin for Dia !

# import time
from mx import DateTime
# import datetime
from openerp.tools.translate import _
from openerp.osv import fields, osv


class hr_employee_children(osv.osv):
    """(NULL)"""
    _name = 'hr.employee.children'

    def _get_age(self, cr, uid, ids, name, arg, context={}):
        def compute_age_from_dates(date_birth):
            now = DateTime.now()
            if (date_birth):
                dob = DateTime.strptime(date_birth, '%Y-%m-%d')
                delta = DateTime.Age(now, dob)
                deceased = ''
                years_months_days = str(delta.years) + "a " + str(delta.months)
                years_months_days += "m " + str(delta.days) + "j" + deceased
            else:
                years_months_days = "0"
            return years_months_days

        result = {}
        for patient_data in self.browse(cr, uid, ids, context=context):
            message = _("Age '%s'") \
                    % (compute_age_from_dates(patient_data.date_birth),)
            self.log(cr, uid, patient_data.id, message)
            dt_brt = patient_data.date_birth
            result[patient_data.id] = compute_age_from_dates(dt_brt)
        return result

    _columns = {
        'name': fields.char('Nom', size=64),
        'prenom': fields.char('Prenom', size=64),
        'date_birth': fields.date('Date de naissance'),
        'age': fields.function(_get_age, method=True, type='char',
                               size=32, string='Age'),
        'employee_id': fields.many2one('hr.employee', 'Parent'),
        'sex': fields.selection([('m', 'M'), ('f', 'F')], 'Sexe'),
    }
hr_employee_children()
